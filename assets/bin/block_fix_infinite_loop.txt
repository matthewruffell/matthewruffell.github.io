commit a55264933f12c2fdc28a66841c4724021e8c1caf
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Jul 3 13:34:22 2018 -0400

    block: fix infinite loop if the device loses discard capability
    
    BugLink: https://bugs.launchpad.net/bugs/1837257
    
    [ Upstream commit b88aef36b87c9787a4db724923ec4f57dfd513f3 ]
    
    If __blkdev_issue_discard is in progress and a device mapper device is
    reloaded with a table that doesn't support discard,
    q->limits.max_discard_sectors is set to zero. This results in infinite
    loop in __blkdev_issue_discard.
    
    This patch checks if max_discard_sectors is zero and aborts with
    -EOPNOTSUPP.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Tested-by: Zdenek Kabelac <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Signed-off-by: Khalid Elmously <khalid.elmously@canonical.com>

diff --git a/block/blk-lib.c b/block/blk-lib.c
index 061ab5456140..012425f5bd8c 100644
--- a/block/blk-lib.c
+++ b/block/blk-lib.c
@@ -54,6 +54,8 @@ int __blkdev_issue_discard(struct block_device *bdev, sector_t sector,
 		sector_t end_sect;
 
 		req_sects = min(req_sects, bio_allowed_max_sectors(q));
+		if (!req_sects)
+			goto fail;
 
 		end_sect = sector + req_sects;
 
@@ -77,6 +79,14 @@ int __blkdev_issue_discard(struct block_device *bdev, sector_t sector,
 
 	*biop = bio;
 	return 0;
+
+fail:
+	if (bio) {
+		submit_bio_wait(bio);
+		bio_put(bio);
+	}
+	*biop = NULL;
+	return -EOPNOTSUPP;
 }
 EXPORT_SYMBOL(__blkdev_issue_discard);
