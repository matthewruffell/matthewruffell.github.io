<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>worker_thread (5 samples, 0.06%)</title><rect x="19.6" y="405" width="0.7" height="15.0" fill="rgb(232,75,15)" rx="2" ry="2" />
<text  x="22.63" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_fastpath (37 samples, 0.44%)</title><rect x="10.0" y="421" width="5.2" height="15.0" fill="rgb(240,95,35)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>generic_make_request (5 samples, 0.06%)</title><rect x="14.0" y="165" width="0.7" height="15.0" fill="rgb(207,196,1)" rx="2" ry="2" />
<text  x="17.05" y="175.5" ></text>
</g>
<g >
<title>mpage_map_and_submit_buffers (5 samples, 0.06%)</title><rect x="19.6" y="261" width="0.7" height="15.0" fill="rgb(241,132,12)" rx="2" ry="2" />
<text  x="22.63" y="271.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (4 samples, 0.05%)</title><rect x="18.2" y="213" width="0.6" height="15.0" fill="rgb(234,195,19)" rx="2" ry="2" />
<text  x="21.24" y="223.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1 samples, 0.01%)</title><rect x="18.1" y="277" width="0.1" height="15.0" fill="rgb(253,129,15)" rx="2" ry="2" />
<text  x="21.10" y="287.5" ></text>
</g>
<g >
<title>read (37 samples, 0.44%)</title><rect x="10.0" y="437" width="5.2" height="15.0" fill="rgb(237,190,14)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>unlock_page (1 samples, 0.01%)</title><rect x="17.8" y="277" width="0.2" height="15.0" fill="rgb(228,60,38)" rx="2" ry="2" />
<text  x="20.82" y="287.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (4 samples, 0.05%)</title><rect x="18.2" y="229" width="0.6" height="15.0" fill="rgb(247,144,3)" rx="2" ry="2" />
<text  x="21.24" y="239.5" ></text>
</g>
<g >
<title>sys_write (27 samples, 0.32%)</title><rect x="15.2" y="405" width="3.7" height="15.0" fill="rgb(231,36,36)" rx="2" ry="2" />
<text  x="18.17" y="415.5" ></text>
</g>
<g >
<title>__remove_mapping (1 samples, 0.01%)</title><rect x="18.9" y="325" width="0.2" height="15.0" fill="rgb(206,97,35)" rx="2" ry="2" />
<text  x="21.94" y="335.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.04%)</title><rect x="600.1" y="373" width="0.5" height="15.0" fill="rgb(208,139,14)" rx="2" ry="2" />
<text  x="603.14" y="383.5" ></text>
</g>
<g >
<title>jbd2_journal_get_write_access (1 samples, 0.01%)</title><rect x="18.7" y="181" width="0.1" height="15.0" fill="rgb(222,181,17)" rx="2" ry="2" />
<text  x="21.66" y="191.5" ></text>
</g>
<g >
<title>kswapd (1 samples, 0.01%)</title><rect x="18.9" y="405" width="0.2" height="15.0" fill="rgb(221,176,19)" rx="2" ry="2" />
<text  x="21.94" y="415.5" ></text>
</g>
<g >
<title>default_idle_call (4,218 samples, 49.91%)</title><rect x="601.1" y="357" width="588.9" height="15.0" fill="rgb(243,54,47)" rx="2" ry="2" />
<text  x="604.12" y="367.5" >default_idle_call</text>
</g>
<g >
<title>arch_cpu_idle (4,218 samples, 49.91%)</title><rect x="601.1" y="341" width="588.9" height="15.0" fill="rgb(230,97,2)" rx="2" ry="2" />
<text  x="604.12" y="351.5" >arch_cpu_idle</text>
</g>
<g >
<title>writeback_sb_inodes (5 samples, 0.06%)</title><rect x="19.6" y="325" width="0.7" height="15.0" fill="rgb(252,120,51)" rx="2" ry="2" />
<text  x="22.63" y="335.5" ></text>
</g>
<g >
<title>jbd2_write_access_granted.part.8 (1 samples, 0.01%)</title><rect x="18.7" y="165" width="0.1" height="15.0" fill="rgb(250,136,4)" rx="2" ry="2" />
<text  x="21.66" y="175.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (27 samples, 0.32%)</title><rect x="11.3" y="293" width="3.7" height="15.0" fill="rgb(245,34,41)" rx="2" ry="2" />
<text  x="14.26" y="303.5" ></text>
</g>
<g >
<title>blk_mq_insert_requests (4 samples, 0.05%)</title><rect x="13.1" y="85" width="0.5" height="15.0" fill="rgb(252,118,54)" rx="2" ry="2" />
<text  x="16.07" y="95.5" ></text>
</g>
<g >
<title>kthread (5 samples, 0.06%)</title><rect x="19.6" y="421" width="0.7" height="15.0" fill="rgb(223,102,24)" rx="2" ry="2" />
<text  x="22.63" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_fastpath (27 samples, 0.32%)</title><rect x="15.2" y="421" width="3.7" height="15.0" fill="rgb(206,175,0)" rx="2" ry="2" />
<text  x="18.17" y="431.5" ></text>
</g>
<g >
<title>ext4_writepages (5 samples, 0.06%)</title><rect x="19.6" y="277" width="0.7" height="15.0" fill="rgb(223,222,37)" rx="2" ry="2" />
<text  x="22.63" y="287.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 0.02%)</title><rect x="11.3" y="229" width="0.2" height="15.0" fill="rgb(221,123,22)" rx="2" ry="2" />
<text  x="14.26" y="239.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.01%)</title><rect x="20.6" y="437" width="0.2" height="15.0" fill="rgb(210,84,24)" rx="2" ry="2" />
<text  x="23.61" y="447.5" ></text>
</g>
<g >
<title>native_safe_halt (4,218 samples, 49.91%)</title><rect x="601.1" y="309" width="588.9" height="15.0" fill="rgb(223,215,52)" rx="2" ry="2" />
<text  x="604.12" y="319.5" >native_safe_halt</text>
</g>
<g >
<title>ret_from_fork (4 samples, 0.05%)</title><rect x="19.1" y="437" width="0.5" height="15.0" fill="rgb(214,143,38)" rx="2" ry="2" />
<text  x="22.07" y="447.5" ></text>
</g>
<g >
<title>page_mkclean (1 samples, 0.01%)</title><rect x="19.8" y="213" width="0.1" height="15.0" fill="rgb(214,157,22)" rx="2" ry="2" />
<text  x="22.77" y="223.5" ></text>
</g>
<g >
<title>__page_cache_alloc (2 samples, 0.02%)</title><rect x="17.3" y="245" width="0.2" height="15.0" fill="rgb(227,86,21)" rx="2" ry="2" />
<text  x="20.26" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="16.7" y="213" width="0.1" height="15.0" fill="rgb(249,169,22)" rx="2" ry="2" />
<text  x="19.70" y="223.5" ></text>
</g>
<g >
<title>up_read (1 samples, 0.01%)</title><rect x="17.1" y="245" width="0.2" height="15.0" fill="rgb(242,175,39)" rx="2" ry="2" />
<text  x="20.12" y="255.5" ></text>
</g>
<g >
<title>do_writepages (5 samples, 0.06%)</title><rect x="19.6" y="293" width="0.7" height="15.0" fill="rgb(220,221,40)" rx="2" ry="2" />
<text  x="22.63" y="303.5" ></text>
</g>
<g >
<title>swapper (8,375 samples, 99.09%)</title><rect x="20.8" y="453" width="1169.2" height="15.0" fill="rgb(236,96,32)" rx="2" ry="2" />
<text  x="23.75" y="463.5" >swapper</text>
</g>
<g >
<title>quiet_vmstat (1 samples, 0.01%)</title><rect x="600.0" y="405" width="0.1" height="15.0" fill="rgb(241,131,35)" rx="2" ry="2" />
<text  x="603.00" y="415.5" ></text>
</g>
<g >
<title>__percpu_counter_add (1 samples, 0.01%)</title><rect x="14.5" y="133" width="0.1" height="15.0" fill="rgb(232,35,13)" rx="2" ry="2" />
<text  x="17.47" y="143.5" ></text>
</g>
<g >
<title>blk_mq_make_request (10 samples, 0.12%)</title><rect x="12.7" y="213" width="1.3" height="15.0" fill="rgb(252,26,45)" rx="2" ry="2" />
<text  x="15.65" y="223.5" ></text>
</g>
<g >
<title>blk_mq_map_request (10 samples, 0.12%)</title><rect x="12.7" y="197" width="1.3" height="15.0" fill="rgb(237,82,49)" rx="2" ry="2" />
<text  x="15.65" y="207.5" ></text>
</g>
<g >
<title>mempool_alloc (2 samples, 0.02%)</title><rect x="14.7" y="165" width="0.3" height="15.0" fill="rgb(236,152,52)" rx="2" ry="2" />
<text  x="17.75" y="175.5" ></text>
</g>
<g >
<title>cpu_startup_entry (4,157 samples, 49.18%)</title><rect x="20.8" y="421" width="580.3" height="15.0" fill="rgb(249,133,20)" rx="2" ry="2" />
<text  x="23.75" y="431.5" >cpu_startup_entry</text>
</g>
<g >
<title>blk_mq_flush_plug_list (4 samples, 0.05%)</title><rect x="13.1" y="101" width="0.5" height="15.0" fill="rgb(213,49,36)" rx="2" ry="2" />
<text  x="16.07" y="111.5" ></text>
</g>
<g >
<title>mprotect_fixup (1 samples, 0.01%)</title><rect x="20.5" y="389" width="0.1" height="15.0" fill="rgb(213,81,10)" rx="2" ry="2" />
<text  x="23.47" y="399.5" ></text>
</g>
<g >
<title>vma_dup_policy (1 samples, 0.01%)</title><rect x="20.5" y="357" width="0.1" height="15.0" fill="rgb(215,221,8)" rx="2" ry="2" />
<text  x="23.47" y="367.5" ></text>
</g>
<g >
<title>rcu_note_context_switch (1 samples, 0.01%)</title><rect x="600.4" y="357" width="0.2" height="15.0" fill="rgb(246,213,51)" rx="2" ry="2" />
<text  x="603.42" y="367.5" ></text>
</g>
<g >
<title>finish_task_switch (2 samples, 0.02%)</title><rect x="600.1" y="357" width="0.3" height="15.0" fill="rgb(222,158,23)" rx="2" ry="2" />
<text  x="603.14" y="367.5" ></text>
</g>
<g >
<title>blk_mq_get_tag (10 samples, 0.12%)</title><rect x="12.7" y="165" width="1.3" height="15.0" fill="rgb(223,55,54)" rx="2" ry="2" />
<text  x="15.65" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.04%)</title><rect x="19.9" y="197" width="0.4" height="15.0" fill="rgb(237,36,49)" rx="2" ry="2" />
<text  x="22.91" y="207.5" ></text>
</g>
<g >
<title>mempool_alloc_slab (2 samples, 0.02%)</title><rect x="14.7" y="149" width="0.3" height="15.0" fill="rgb(221,24,14)" rx="2" ry="2" />
<text  x="17.75" y="159.5" ></text>
</g>
<g >
<title>refresh_cpu_vm_stats (1 samples, 0.01%)</title><rect x="600.0" y="389" width="0.1" height="15.0" fill="rgb(214,186,25)" rx="2" ry="2" />
<text  x="603.00" y="399.5" ></text>
</g>
<g >
<title>default_idle (4,218 samples, 49.91%)</title><rect x="601.1" y="325" width="588.9" height="15.0" fill="rgb(253,207,23)" rx="2" ry="2" />
<text  x="604.12" y="335.5" >default_idle</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="18.9" y="309" width="0.2" height="15.0" fill="rgb(253,155,54)" rx="2" ry="2" />
<text  x="21.94" y="319.5" ></text>
</g>
<g >
<title>__lru_cache_add (1 samples, 0.01%)</title><rect x="17.7" y="213" width="0.1" height="15.0" fill="rgb(225,84,16)" rx="2" ry="2" />
<text  x="20.68" y="223.5" ></text>
</g>
<g >
<title>cp (64 samples, 0.76%)</title><rect x="10.0" y="453" width="8.9" height="15.0" fill="rgb(212,11,31)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (1 samples, 0.01%)</title><rect x="16.3" y="277" width="0.1" height="15.0" fill="rgb(248,125,18)" rx="2" ry="2" />
<text  x="19.28" y="287.5" ></text>
</g>
<g >
<title>submit_bio (18 samples, 0.21%)</title><rect x="12.5" y="245" width="2.5" height="15.0" fill="rgb(218,100,8)" rx="2" ry="2" />
<text  x="15.51" y="255.5" ></text>
</g>
<g >
<title>balance_dirty_pages_ratelimited (1 samples, 0.01%)</title><rect x="15.2" y="293" width="0.1" height="15.0" fill="rgb(213,97,49)" rx="2" ry="2" />
<text  x="18.17" y="303.5" ></text>
</g>
<g >
<title>start_secondary (4,157 samples, 49.18%)</title><rect x="20.8" y="437" width="580.3" height="15.0" fill="rgb(236,116,0)" rx="2" ry="2" />
<text  x="23.75" y="447.5" >start_secondary</text>
</g>
<g >
<title>worker_thread (4 samples, 0.05%)</title><rect x="19.1" y="405" width="0.5" height="15.0" fill="rgb(243,88,39)" rx="2" ry="2" />
<text  x="22.07" y="415.5" ></text>
</g>
<g >
<title>__split_and_process_bio (7 samples, 0.08%)</title><rect x="14.0" y="197" width="1.0" height="15.0" fill="rgb(242,18,25)" rx="2" ry="2" />
<text  x="17.05" y="207.5" ></text>
</g>
<g >
<title>default_idle (4,148 samples, 49.08%)</title><rect x="20.9" y="373" width="579.1" height="15.0" fill="rgb(211,1,42)" rx="2" ry="2" />
<text  x="23.89" y="383.5" >default_idle</text>
</g>
<g >
<title>schedule (1 samples, 0.01%)</title><rect x="19.5" y="389" width="0.1" height="15.0" fill="rgb(219,109,46)" rx="2" ry="2" />
<text  x="22.49" y="399.5" ></text>
</g>
<g >
<title>kworker/1:1H (4 samples, 0.05%)</title><rect x="19.1" y="453" width="0.5" height="15.0" fill="rgb(214,102,29)" rx="2" ry="2" />
<text  x="22.07" y="463.5" ></text>
</g>
<g >
<title>generic_make_request_checks (5 samples, 0.06%)</title><rect x="14.0" y="149" width="0.7" height="15.0" fill="rgb(247,208,7)" rx="2" ry="2" />
<text  x="17.05" y="159.5" ></text>
</g>
<g >
<title>__vfs_write (27 samples, 0.32%)</title><rect x="15.2" y="373" width="3.7" height="15.0" fill="rgb(245,105,46)" rx="2" ry="2" />
<text  x="18.17" y="383.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (2 samples, 0.02%)</title><rect x="12.2" y="197" width="0.3" height="15.0" fill="rgb(233,191,46)" rx="2" ry="2" />
<text  x="15.23" y="207.5" ></text>
</g>
<g >
<title>schedule_timeout (3 samples, 0.04%)</title><rect x="13.6" y="117" width="0.4" height="15.0" fill="rgb(249,93,45)" rx="2" ry="2" />
<text  x="16.63" y="127.5" ></text>
</g>
<g >
<title>_find_next_bit.part.0 (1 samples, 0.01%)</title><rect x="12.9" y="101" width="0.2" height="15.0" fill="rgb(244,162,6)" rx="2" ry="2" />
<text  x="15.93" y="111.5" ></text>
</g>
<g >
<title>shrink_zone (1 samples, 0.01%)</title><rect x="18.9" y="389" width="0.2" height="15.0" fill="rgb(248,96,41)" rx="2" ry="2" />
<text  x="21.94" y="399.5" ></text>
</g>
<g >
<title>jbd2__journal_start (1 samples, 0.01%)</title><rect x="16.3" y="261" width="0.1" height="15.0" fill="rgb(227,112,18)" rx="2" ry="2" />
<text  x="19.28" y="271.5" ></text>
</g>
<g >
<title>ext4_claim_free_clusters (1 samples, 0.01%)</title><rect x="16.8" y="245" width="0.2" height="15.0" fill="rgb(226,216,15)" rx="2" ry="2" />
<text  x="19.84" y="255.5" ></text>
</g>
<g >
<title>shrink_lruvec (1 samples, 0.01%)</title><rect x="18.9" y="373" width="0.2" height="15.0" fill="rgb(235,220,11)" rx="2" ry="2" />
<text  x="21.94" y="383.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.04%)</title><rect x="13.6" y="85" width="0.4" height="15.0" fill="rgb(207,1,18)" rx="2" ry="2" />
<text  x="16.63" y="95.5" ></text>
</g>
<g >
<title>process_one_work (1 samples, 0.01%)</title><rect x="19.4" y="389" width="0.1" height="15.0" fill="rgb(235,132,8)" rx="2" ry="2" />
<text  x="22.35" y="399.5" ></text>
</g>
<g >
<title>_find_next_bit.part.0 (2 samples, 0.02%)</title><rect x="12.7" y="117" width="0.2" height="15.0" fill="rgb(240,81,9)" rx="2" ry="2" />
<text  x="15.65" y="127.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.01%)</title><rect x="17.7" y="197" width="0.1" height="15.0" fill="rgb(216,146,38)" rx="2" ry="2" />
<text  x="20.68" y="207.5" ></text>
</g>
<g >
<title>generic_file_read_iter (37 samples, 0.44%)</title><rect x="10.0" y="341" width="5.2" height="15.0" fill="rgb(237,169,8)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>generic_write_end (5 samples, 0.06%)</title><rect x="18.2" y="277" width="0.7" height="15.0" fill="rgb(249,173,1)" rx="2" ry="2" />
<text  x="21.24" y="287.5" ></text>
</g>
<g >
<title>finish_task_switch (3 samples, 0.04%)</title><rect x="13.6" y="69" width="0.4" height="15.0" fill="rgb(230,23,24)" rx="2" ry="2" />
<text  x="16.63" y="79.5" ></text>
</g>
<g >
<title>cpu_startup_entry (4,218 samples, 49.91%)</title><rect x="601.1" y="373" width="588.9" height="15.0" fill="rgb(224,27,53)" rx="2" ry="2" />
<text  x="604.12" y="383.5" >cpu_startup_entry</text>
</g>
<g >
<title>blk_mq_run_work_fn (1 samples, 0.01%)</title><rect x="19.2" y="389" width="0.2" height="15.0" fill="rgb(223,184,6)" rx="2" ry="2" />
<text  x="22.21" y="399.5" ></text>
</g>
<g >
<title>ret_from_fork (5 samples, 0.06%)</title><rect x="19.6" y="437" width="0.7" height="15.0" fill="rgb(220,77,33)" rx="2" ry="2" />
<text  x="22.63" y="447.5" ></text>
</g>
<g >
<title>ext4_da_get_block_prep (6 samples, 0.07%)</title><rect x="16.4" y="261" width="0.9" height="15.0" fill="rgb(254,57,18)" rx="2" ry="2" />
<text  x="19.42" y="271.5" ></text>
</g>
<g >
<title>arch_cpu_idle (4,148 samples, 49.08%)</title><rect x="20.9" y="389" width="579.1" height="15.0" fill="rgb(233,216,5)" rx="2" ry="2" />
<text  x="23.89" y="399.5" >arch_cpu_idle</text>
</g>
<g >
<title>ext4_dirty_inode (4 samples, 0.05%)</title><rect x="18.2" y="245" width="0.6" height="15.0" fill="rgb(248,125,38)" rx="2" ry="2" />
<text  x="21.24" y="255.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (2 samples, 0.02%)</title><rect x="17.5" y="245" width="0.3" height="15.0" fill="rgb(209,204,13)" rx="2" ry="2" />
<text  x="20.54" y="255.5" ></text>
</g>
<g >
<title>queue_delayed_work_on (3 samples, 0.04%)</title><rect x="13.2" y="37" width="0.4" height="15.0" fill="rgb(216,0,32)" rx="2" ry="2" />
<text  x="16.21" y="47.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (6 samples, 0.07%)</title><rect x="16.4" y="277" width="0.9" height="15.0" fill="rgb(242,217,37)" rx="2" ry="2" />
<text  x="19.42" y="287.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (3 samples, 0.04%)</title><rect x="18.2" y="197" width="0.5" height="15.0" fill="rgb(228,90,34)" rx="2" ry="2" />
<text  x="21.24" y="207.5" ></text>
</g>
<g >
<title>write (27 samples, 0.32%)</title><rect x="15.2" y="437" width="3.7" height="15.0" fill="rgb(236,173,41)" rx="2" ry="2" />
<text  x="18.17" y="447.5" ></text>
</g>
<g >
<title>put_page (1 samples, 0.01%)</title><rect x="15.0" y="325" width="0.2" height="15.0" fill="rgb(236,42,41)" rx="2" ry="2" />
<text  x="18.03" y="335.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.01%)</title><rect x="19.5" y="373" width="0.1" height="15.0" fill="rgb(245,172,4)" rx="2" ry="2" />
<text  x="22.49" y="383.5" ></text>
</g>
<g >
<title>[sshd] (1 samples, 0.01%)</title><rect x="20.6" y="421" width="0.2" height="15.0" fill="rgb(252,163,12)" rx="2" ry="2" />
<text  x="23.61" y="431.5" ></text>
</g>
<g >
<title>generic_perform_write (27 samples, 0.32%)</title><rect x="15.2" y="309" width="3.7" height="15.0" fill="rgb(253,76,22)" rx="2" ry="2" />
<text  x="18.17" y="319.5" ></text>
</g>
<g >
<title>blk_mq_run_hw_queue (4 samples, 0.05%)</title><rect x="13.1" y="69" width="0.5" height="15.0" fill="rgb(226,69,11)" rx="2" ry="2" />
<text  x="16.07" y="79.5" ></text>
</g>
<g >
<title>pagecache_get_page (4 samples, 0.05%)</title><rect x="17.3" y="261" width="0.5" height="15.0" fill="rgb(233,222,43)" rx="2" ry="2" />
<text  x="20.26" y="271.5" ></text>
</g>
<g >
<title>blk_mq_make_request (1 samples, 0.01%)</title><rect x="12.5" y="229" width="0.2" height="15.0" fill="rgb(242,35,23)" rx="2" ry="2" />
<text  x="15.51" y="239.5" ></text>
</g>
<g >
<title>shrink_inactive_list (1 samples, 0.01%)</title><rect x="18.9" y="357" width="0.2" height="15.0" fill="rgb(232,60,33)" rx="2" ry="2" />
<text  x="21.94" y="367.5" ></text>
</g>
<g >
<title>ext4_es_lookup_extent (1 samples, 0.01%)</title><rect x="17.0" y="245" width="0.1" height="15.0" fill="rgb(240,36,19)" rx="2" ry="2" />
<text  x="19.98" y="255.5" ></text>
</g>
<g >
<title>blk_flush_plug_list (4 samples, 0.05%)</title><rect x="13.1" y="117" width="0.5" height="15.0" fill="rgb(244,72,12)" rx="2" ry="2" />
<text  x="16.07" y="127.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.01%)</title><rect x="17.4" y="213" width="0.1" height="15.0" fill="rgb(205,14,38)" rx="2" ry="2" />
<text  x="20.40" y="223.5" ></text>
</g>
<g >
<title>__writeback_inodes_wb (5 samples, 0.06%)</title><rect x="19.6" y="341" width="0.7" height="15.0" fill="rgb(213,24,40)" rx="2" ry="2" />
<text  x="22.63" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_fastpath (1 samples, 0.01%)</title><rect x="20.5" y="421" width="0.1" height="15.0" fill="rgb(242,171,42)" rx="2" ry="2" />
<text  x="23.47" y="431.5" ></text>
</g>
<g >
<title>wb_writeback (5 samples, 0.06%)</title><rect x="19.6" y="357" width="0.7" height="15.0" fill="rgb(224,53,9)" rx="2" ry="2" />
<text  x="22.63" y="367.5" ></text>
</g>
<g >
<title>[ld-2.23.so] (2 samples, 0.02%)</title><rect x="20.3" y="437" width="0.3" height="15.0" fill="rgb(224,196,44)" rx="2" ry="2" />
<text  x="23.33" y="447.5" ></text>
</g>
<g >
<title>sys_read (37 samples, 0.44%)</title><rect x="10.0" y="405" width="5.2" height="15.0" fill="rgb(224,61,39)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (2 samples, 0.02%)</title><rect x="12.0" y="213" width="0.2" height="15.0" fill="rgb(212,14,34)" rx="2" ry="2" />
<text  x="14.95" y="223.5" ></text>
</g>
<g >
<title>inode_add_rsv_space (1 samples, 0.01%)</title><rect x="16.7" y="229" width="0.1" height="15.0" fill="rgb(234,76,47)" rx="2" ry="2" />
<text  x="19.70" y="239.5" ></text>
</g>
<g >
<title>__ext4_journal_get_write_access (1 samples, 0.01%)</title><rect x="18.7" y="197" width="0.1" height="15.0" fill="rgb(217,101,14)" rx="2" ry="2" />
<text  x="21.66" y="207.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="17.4" y="197" width="0.1" height="15.0" fill="rgb(252,137,26)" rx="2" ry="2" />
<text  x="20.40" y="207.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="17.5" y="197" width="0.2" height="15.0" fill="rgb(228,138,26)" rx="2" ry="2" />
<text  x="20.54" y="207.5" ></text>
</g>
<g >
<title>sys_mprotect (1 samples, 0.01%)</title><rect x="20.5" y="405" width="0.1" height="15.0" fill="rgb(221,42,25)" rx="2" ry="2" />
<text  x="23.47" y="415.5" ></text>
</g>
<g >
<title>rest_init (4,218 samples, 49.91%)</title><rect x="601.1" y="389" width="588.9" height="15.0" fill="rgb(238,227,49)" rx="2" ry="2" />
<text  x="604.12" y="399.5" >rest_init</text>
</g>
<g >
<title>ext4_readpages (25 samples, 0.30%)</title><rect x="11.5" y="277" width="3.5" height="15.0" fill="rgb(224,142,5)" rx="2" ry="2" />
<text  x="14.54" y="287.5" ></text>
</g>
<g >
<title>ondemand_readahead (27 samples, 0.32%)</title><rect x="11.3" y="309" width="3.7" height="15.0" fill="rgb(243,137,34)" rx="2" ry="2" />
<text  x="14.26" y="319.5" ></text>
</g>
<g >
<title>blk_throtl_bio (1 samples, 0.01%)</title><rect x="14.6" y="133" width="0.1" height="15.0" fill="rgb(252,119,8)" rx="2" ry="2" />
<text  x="17.61" y="143.5" ></text>
</g>
<g >
<title>native_safe_halt (4,148 samples, 49.08%)</title><rect x="20.9" y="357" width="579.1" height="15.0" fill="rgb(229,223,33)" rx="2" ry="2" />
<text  x="23.89" y="367.5" >native_safe_halt</text>
</g>
<g >
<title>kworker/u4:1 (5 samples, 0.06%)</title><rect x="19.6" y="453" width="0.7" height="15.0" fill="rgb(227,176,35)" rx="2" ry="2" />
<text  x="22.63" y="463.5" ></text>
</g>
<g >
<title>lru_cache_add (1 samples, 0.01%)</title><rect x="17.7" y="229" width="0.1" height="15.0" fill="rgb(243,165,43)" rx="2" ry="2" />
<text  x="20.68" y="239.5" ></text>
</g>
<g >
<title>kthread (4 samples, 0.05%)</title><rect x="19.1" y="421" width="0.5" height="15.0" fill="rgb(246,10,41)" rx="2" ry="2" />
<text  x="22.07" y="431.5" ></text>
</g>
<g >
<title>__vfs_read (37 samples, 0.44%)</title><rect x="10.0" y="373" width="5.2" height="15.0" fill="rgb(211,189,22)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (2 samples, 0.02%)</title><rect x="14.7" y="133" width="0.3" height="15.0" fill="rgb(247,7,46)" rx="2" ry="2" />
<text  x="17.75" y="143.5" ></text>
</g>
<g >
<title>__page_cache_alloc (2 samples, 0.02%)</title><rect x="11.3" y="277" width="0.2" height="15.0" fill="rgb(229,88,20)" rx="2" ry="2" />
<text  x="14.26" y="287.5" ></text>
</g>
<g >
<title>__wake_up_bit (1 samples, 0.01%)</title><rect x="17.8" y="261" width="0.2" height="15.0" fill="rgb(248,176,20)" rx="2" ry="2" />
<text  x="20.82" y="271.5" ></text>
</g>
<g >
<title>__sched_text_start (7 samples, 0.08%)</title><rect x="13.1" y="133" width="0.9" height="15.0" fill="rgb(243,229,52)" rx="2" ry="2" />
<text  x="16.07" y="143.5" ></text>
</g>
<g >
<title>find_next_zero_bit (1 samples, 0.01%)</title><rect x="12.9" y="117" width="0.2" height="15.0" fill="rgb(219,67,52)" rx="2" ry="2" />
<text  x="15.93" y="127.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (6 samples, 0.07%)</title><rect x="11.7" y="245" width="0.8" height="15.0" fill="rgb(236,44,35)" rx="2" ry="2" />
<text  x="14.68" y="255.5" ></text>
</g>
<g >
<title>split_vma (1 samples, 0.01%)</title><rect x="20.5" y="373" width="0.1" height="15.0" fill="rgb(209,63,3)" rx="2" ry="2" />
<text  x="23.47" y="383.5" ></text>
</g>
<g >
<title>mpage_submit_page (4 samples, 0.05%)</title><rect x="19.8" y="245" width="0.5" height="15.0" fill="rgb(216,225,2)" rx="2" ry="2" />
<text  x="22.77" y="255.5" ></text>
</g>
<g >
<title>tick_nohz_idle_enter (4 samples, 0.05%)</title><rect x="600.6" y="405" width="0.5" height="15.0" fill="rgb(213,168,18)" rx="2" ry="2" />
<text  x="603.56" y="415.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (2 samples, 0.02%)</title><rect x="11.3" y="245" width="0.2" height="15.0" fill="rgb(212,210,34)" rx="2" ry="2" />
<text  x="14.26" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.02%)</title><rect x="12.2" y="181" width="0.3" height="15.0" fill="rgb(222,226,48)" rx="2" ry="2" />
<text  x="15.23" y="191.5" ></text>
</g>
<g >
<title>bt_get (10 samples, 0.12%)</title><rect x="12.7" y="149" width="1.3" height="15.0" fill="rgb(220,48,27)" rx="2" ry="2" />
<text  x="15.65" y="159.5" ></text>
</g>
<g >
<title>default_idle_call (4,148 samples, 49.08%)</title><rect x="20.9" y="405" width="579.1" height="15.0" fill="rgb(238,1,20)" rx="2" ry="2" />
<text  x="23.89" y="415.5" >default_idle_call</text>
</g>
<g >
<title>shrink_page_list (1 samples, 0.01%)</title><rect x="18.9" y="341" width="0.2" height="15.0" fill="rgb(210,158,3)" rx="2" ry="2" />
<text  x="21.94" y="351.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (4,218 samples, 49.91%)</title><rect x="601.1" y="437" width="588.9" height="15.0" fill="rgb(239,45,16)" rx="2" ry="2" />
<text  x="604.12" y="447.5" >x86_64_start_kernel</text>
</g>
<g >
<title>all (8,452 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(215,10,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>kswapd0 (1 samples, 0.01%)</title><rect x="18.9" y="453" width="0.2" height="15.0" fill="rgb(217,16,6)" rx="2" ry="2" />
<text  x="21.94" y="463.5" ></text>
</g>
<g >
<title>__lru_cache_add (2 samples, 0.02%)</title><rect x="12.2" y="213" width="0.3" height="15.0" fill="rgb(221,207,28)" rx="2" ry="2" />
<text  x="15.23" y="223.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.01%)</title><rect x="18.9" y="421" width="0.2" height="15.0" fill="rgb(205,60,47)" rx="2" ry="2" />
<text  x="21.94" y="431.5" ></text>
</g>
<g >
<title>dm_make_request (7 samples, 0.08%)</title><rect x="14.0" y="213" width="1.0" height="15.0" fill="rgb(230,67,11)" rx="2" ry="2" />
<text  x="17.05" y="223.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (27 samples, 0.32%)</title><rect x="15.2" y="341" width="3.7" height="15.0" fill="rgb(234,191,11)" rx="2" ry="2" />
<text  x="18.17" y="351.5" ></text>
</g>
<g >
<title>alloc_pages_current (2 samples, 0.02%)</title><rect x="17.3" y="229" width="0.2" height="15.0" fill="rgb(214,29,51)" rx="2" ry="2" />
<text  x="20.26" y="239.5" ></text>
</g>
<g >
<title>vfs_read (37 samples, 0.44%)</title><rect x="10.0" y="389" width="5.2" height="15.0" fill="rgb(208,133,4)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>schedule (3 samples, 0.04%)</title><rect x="13.6" y="101" width="0.4" height="15.0" fill="rgb(220,113,26)" rx="2" ry="2" />
<text  x="16.63" y="111.5" ></text>
</g>
<g >
<title>__block_commit_write.isra.23 (1 samples, 0.01%)</title><rect x="18.8" y="245" width="0.1" height="15.0" fill="rgb(236,33,48)" rx="2" ry="2" />
<text  x="21.80" y="255.5" ></text>
</g>
<g >
<title>schedule_preempt_disabled (3 samples, 0.04%)</title><rect x="600.1" y="405" width="0.5" height="15.0" fill="rgb(237,107,41)" rx="2" ry="2" />
<text  x="603.14" y="415.5" ></text>
</g>
<g >
<title>lru_cache_add (2 samples, 0.02%)</title><rect x="12.2" y="229" width="0.3" height="15.0" fill="rgb(254,228,47)" rx="2" ry="2" />
<text  x="15.23" y="239.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (5 samples, 0.06%)</title><rect x="15.3" y="293" width="0.7" height="15.0" fill="rgb(217,55,33)" rx="2" ry="2" />
<text  x="18.31" y="303.5" ></text>
</g>
<g >
<title>ext4_da_write_end (7 samples, 0.08%)</title><rect x="18.0" y="293" width="0.9" height="15.0" fill="rgb(237,224,47)" rx="2" ry="2" />
<text  x="20.96" y="303.5" ></text>
</g>
<g >
<title>__dquot_alloc_space (1 samples, 0.01%)</title><rect x="16.7" y="245" width="0.1" height="15.0" fill="rgb(245,17,46)" rx="2" ry="2" />
<text  x="19.70" y="255.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (3 samples, 0.04%)</title><rect x="11.8" y="229" width="0.4" height="15.0" fill="rgb(242,141,38)" rx="2" ry="2" />
<text  x="14.81" y="239.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="17.7" y="181" width="0.1" height="15.0" fill="rgb(221,188,25)" rx="2" ry="2" />
<text  x="20.68" y="191.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (1 samples, 0.01%)</title><rect x="17.5" y="213" width="0.2" height="15.0" fill="rgb(231,150,2)" rx="2" ry="2" />
<text  x="20.54" y="223.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (4 samples, 0.05%)</title><rect x="17.3" y="277" width="0.5" height="15.0" fill="rgb(234,208,33)" rx="2" ry="2" />
<text  x="20.26" y="287.5" ></text>
</g>
<g >
<title>start_this_handle (1 samples, 0.01%)</title><rect x="16.3" y="245" width="0.1" height="15.0" fill="rgb(251,73,48)" rx="2" ry="2" />
<text  x="19.28" y="255.5" ></text>
</g>
<g >
<title>__map_bio (5 samples, 0.06%)</title><rect x="14.0" y="181" width="0.7" height="15.0" fill="rgb(253,55,6)" rx="2" ry="2" />
<text  x="17.05" y="191.5" ></text>
</g>
<g >
<title>start_kernel (4,218 samples, 49.91%)</title><rect x="601.1" y="405" width="588.9" height="15.0" fill="rgb(244,148,23)" rx="2" ry="2" />
<text  x="604.12" y="415.5" >start_kernel</text>
</g>
<g >
<title>copy_page_to_iter (9 samples, 0.11%)</title><rect x="10.0" y="325" width="1.3" height="15.0" fill="rgb(231,49,12)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>alloc_pages_current (2 samples, 0.02%)</title><rect x="11.3" y="261" width="0.2" height="15.0" fill="rgb(246,144,9)" rx="2" ry="2" />
<text  x="14.26" y="271.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (1 samples, 0.01%)</title><rect x="17.5" y="229" width="0.2" height="15.0" fill="rgb(243,106,14)" rx="2" ry="2" />
<text  x="20.54" y="239.5" ></text>
</g>
<g >
<title>ext4_bio_write_page (3 samples, 0.04%)</title><rect x="19.9" y="229" width="0.4" height="15.0" fill="rgb(237,53,14)" rx="2" ry="2" />
<text  x="22.91" y="239.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (25 samples, 0.30%)</title><rect x="11.5" y="261" width="3.5" height="15.0" fill="rgb(253,25,27)" rx="2" ry="2" />
<text  x="14.54" y="271.5" ></text>
</g>
<g >
<title>clear_page_dirty_for_io (1 samples, 0.01%)</title><rect x="19.8" y="229" width="0.1" height="15.0" fill="rgb(252,90,23)" rx="2" ry="2" />
<text  x="22.77" y="239.5" ></text>
</g>
<g >
<title>__writeback_single_inode (5 samples, 0.06%)</title><rect x="19.6" y="309" width="0.7" height="15.0" fill="rgb(222,218,33)" rx="2" ry="2" />
<text  x="22.63" y="319.5" ></text>
</g>
<g >
<title>__set_page_dirty (1 samples, 0.01%)</title><rect x="18.8" y="213" width="0.1" height="15.0" fill="rgb(234,173,14)" rx="2" ry="2" />
<text  x="21.80" y="223.5" ></text>
</g>
<g >
<title>wb_workfn (5 samples, 0.06%)</title><rect x="19.6" y="373" width="0.7" height="15.0" fill="rgb(245,67,12)" rx="2" ry="2" />
<text  x="22.63" y="383.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (4 samples, 0.05%)</title><rect x="18.2" y="261" width="0.6" height="15.0" fill="rgb(214,157,3)" rx="2" ry="2" />
<text  x="21.24" y="271.5" ></text>
</g>
<g >
<title>new_sync_write (27 samples, 0.32%)</title><rect x="15.2" y="357" width="3.7" height="15.0" fill="rgb(245,169,13)" rx="2" ry="2" />
<text  x="18.17" y="367.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (1 samples, 0.01%)</title><rect x="18.8" y="229" width="0.1" height="15.0" fill="rgb(225,54,47)" rx="2" ry="2" />
<text  x="21.80" y="239.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (27 samples, 0.32%)</title><rect x="15.2" y="325" width="3.7" height="15.0" fill="rgb(240,107,1)" rx="2" ry="2" />
<text  x="18.17" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="18.8" y="197" width="0.1" height="15.0" fill="rgb(208,206,7)" rx="2" ry="2" />
<text  x="21.80" y="207.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.01%)</title><rect x="19.5" y="357" width="0.1" height="15.0" fill="rgb(246,99,49)" rx="2" ry="2" />
<text  x="22.49" y="367.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (14 samples, 0.17%)</title><rect x="16.0" y="293" width="2.0" height="15.0" fill="rgb(231,85,38)" rx="2" ry="2" />
<text  x="19.00" y="303.5" ></text>
</g>
<g >
<title>schedule (3 samples, 0.04%)</title><rect x="600.1" y="389" width="0.5" height="15.0" fill="rgb(237,111,4)" rx="2" ry="2" />
<text  x="603.14" y="399.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (9 samples, 0.11%)</title><rect x="10.0" y="309" width="1.3" height="15.0" fill="rgb(220,92,38)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>process_one_work (5 samples, 0.06%)</title><rect x="19.6" y="389" width="0.7" height="15.0" fill="rgb(244,127,34)" rx="2" ry="2" />
<text  x="22.63" y="399.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.01%)</title><rect x="18.9" y="437" width="0.2" height="15.0" fill="rgb(205,196,31)" rx="2" ry="2" />
<text  x="21.94" y="447.5" ></text>
</g>
<g >
<title>page_cache_async_readahead (27 samples, 0.32%)</title><rect x="11.3" y="325" width="3.7" height="15.0" fill="rgb(227,184,14)" rx="2" ry="2" />
<text  x="14.26" y="335.5" ></text>
</g>
<g >
<title>new_sync_read (37 samples, 0.44%)</title><rect x="10.0" y="357" width="5.2" height="15.0" fill="rgb(254,148,12)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.01%)</title><rect x="14.9" y="117" width="0.1" height="15.0" fill="rgb(209,19,29)" rx="2" ry="2" />
<text  x="17.89" y="127.5" ></text>
</g>
<g >
<title>bio_alloc_bioset (2 samples, 0.02%)</title><rect x="14.7" y="181" width="0.3" height="15.0" fill="rgb(210,119,26)" rx="2" ry="2" />
<text  x="17.75" y="191.5" ></text>
</g>
<g >
<title>__blk_mq_alloc_request (10 samples, 0.12%)</title><rect x="12.7" y="181" width="1.3" height="15.0" fill="rgb(208,132,22)" rx="2" ry="2" />
<text  x="15.65" y="191.5" ></text>
</g>
<g >
<title>sshd (3 samples, 0.04%)</title><rect x="20.3" y="453" width="0.5" height="15.0" fill="rgb(229,42,26)" rx="2" ry="2" />
<text  x="23.33" y="463.5" ></text>
</g>
<g >
<title>generic_make_request (17 samples, 0.20%)</title><rect x="12.7" y="229" width="2.3" height="15.0" fill="rgb(237,72,38)" rx="2" ry="2" />
<text  x="15.65" y="239.5" ></text>
</g>
<g >
<title>__test_set_page_writeback (3 samples, 0.04%)</title><rect x="19.9" y="213" width="0.4" height="15.0" fill="rgb(248,160,24)" rx="2" ry="2" />
<text  x="22.91" y="223.5" ></text>
</g>
<g >
<title>__bt_get.isra.7 (3 samples, 0.04%)</title><rect x="12.7" y="133" width="0.4" height="15.0" fill="rgb(218,29,5)" rx="2" ry="2" />
<text  x="15.65" y="143.5" ></text>
</g>
<g >
<title>kblockd_schedule_delayed_work_on (3 samples, 0.04%)</title><rect x="13.2" y="53" width="0.4" height="15.0" fill="rgb(226,18,13)" rx="2" ry="2" />
<text  x="16.21" y="63.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (4,218 samples, 49.91%)</title><rect x="601.1" y="421" width="588.9" height="15.0" fill="rgb(243,42,33)" rx="2" ry="2" />
<text  x="604.12" y="431.5" >x86_64_start_reservations</text>
</g>
<g >
<title>block_write_end (1 samples, 0.01%)</title><rect x="18.8" y="261" width="0.1" height="15.0" fill="rgb(250,189,7)" rx="2" ry="2" />
<text  x="21.80" y="271.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.01%)</title><rect x="12.1" y="197" width="0.1" height="15.0" fill="rgb(244,67,29)" rx="2" ry="2" />
<text  x="15.09" y="207.5" ></text>
</g>
<g >
<title>vfs_write (27 samples, 0.32%)</title><rect x="15.2" y="389" width="3.7" height="15.0" fill="rgb(228,113,44)" rx="2" ry="2" />
<text  x="18.17" y="399.5" ></text>
</g>
</g>
</svg>
